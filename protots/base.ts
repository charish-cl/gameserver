// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: base.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface ProtoRequest {
  /** 协议ID，标识业务类型（如登录、支付） */
  protocolId: number;
  /** 请求序列号，客户端生成，唯一标识本次请求 */
  sequenceId: number;
  /** 业务参数（Protobuf/JSON序列化数据） */
  message: Uint8Array;
}

export interface ProtoResponse {
  /** 与请求的协议ID一致 */
  protocolId: number;
  /** 原样返回请求的序列号 */
  sequenceId: number;
  /** 错误码（0=成功，非0=失败） */
  errorCode: number;
  /** 错误详情（如“用户不存在”） */
  errorMsg: string;
  message: Uint8Array;
}

function createBaseProtoRequest(): ProtoRequest {
  return { protocolId: 0, sequenceId: 0, message: new Uint8Array(0) };
}

export const ProtoRequest: MessageFns<ProtoRequest> = {
  encode(message: ProtoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.protocolId !== 0) {
      writer.uint32(8).uint32(message.protocolId);
    }
    if (message.sequenceId !== 0) {
      writer.uint32(16).uint64(message.sequenceId);
    }
    if (message.message.length !== 0) {
      writer.uint32(26).bytes(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.protocolId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sequenceId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoRequest {
    return {
      protocolId: isSet(object.protocolId) ? globalThis.Number(object.protocolId) : 0,
      sequenceId: isSet(object.sequenceId) ? globalThis.Number(object.sequenceId) : 0,
      message: isSet(object.message) ? bytesFromBase64(object.message) : new Uint8Array(0),
    };
  },

  toJSON(message: ProtoRequest): unknown {
    const obj: any = {};
    if (message.protocolId !== 0) {
      obj.protocolId = Math.round(message.protocolId);
    }
    if (message.sequenceId !== 0) {
      obj.sequenceId = Math.round(message.sequenceId);
    }
    if (message.message.length !== 0) {
      obj.message = base64FromBytes(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoRequest>, I>>(base?: I): ProtoRequest {
    return ProtoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoRequest>, I>>(object: I): ProtoRequest {
    const message = createBaseProtoRequest();
    message.protocolId = object.protocolId ?? 0;
    message.sequenceId = object.sequenceId ?? 0;
    message.message = object.message ?? new Uint8Array(0);
    return message;
  },
};

function createBaseProtoResponse(): ProtoResponse {
  return { protocolId: 0, sequenceId: 0, errorCode: 0, errorMsg: "", message: new Uint8Array(0) };
}

export const ProtoResponse: MessageFns<ProtoResponse> = {
  encode(message: ProtoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.protocolId !== 0) {
      writer.uint32(8).uint32(message.protocolId);
    }
    if (message.sequenceId !== 0) {
      writer.uint32(16).uint64(message.sequenceId);
    }
    if (message.errorCode !== 0) {
      writer.uint32(24).int32(message.errorCode);
    }
    if (message.errorMsg !== "") {
      writer.uint32(34).string(message.errorMsg);
    }
    if (message.message.length !== 0) {
      writer.uint32(42).bytes(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.protocolId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sequenceId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.errorCode = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.errorMsg = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.message = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoResponse {
    return {
      protocolId: isSet(object.protocolId) ? globalThis.Number(object.protocolId) : 0,
      sequenceId: isSet(object.sequenceId) ? globalThis.Number(object.sequenceId) : 0,
      errorCode: isSet(object.errorCode) ? globalThis.Number(object.errorCode) : 0,
      errorMsg: isSet(object.errorMsg) ? globalThis.String(object.errorMsg) : "",
      message: isSet(object.message) ? bytesFromBase64(object.message) : new Uint8Array(0),
    };
  },

  toJSON(message: ProtoResponse): unknown {
    const obj: any = {};
    if (message.protocolId !== 0) {
      obj.protocolId = Math.round(message.protocolId);
    }
    if (message.sequenceId !== 0) {
      obj.sequenceId = Math.round(message.sequenceId);
    }
    if (message.errorCode !== 0) {
      obj.errorCode = Math.round(message.errorCode);
    }
    if (message.errorMsg !== "") {
      obj.errorMsg = message.errorMsg;
    }
    if (message.message.length !== 0) {
      obj.message = base64FromBytes(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoResponse>, I>>(base?: I): ProtoResponse {
    return ProtoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoResponse>, I>>(object: I): ProtoResponse {
    const message = createBaseProtoResponse();
    message.protocolId = object.protocolId ?? 0;
    message.sequenceId = object.sequenceId ?? 0;
    message.errorCode = object.errorCode ?? 0;
    message.errorMsg = object.errorMsg ?? "";
    message.message = object.message ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
